.. !split

.. _softeng1:prog:se:class:

Classes for problem and solution method
=======================================

The :math:`\theta`-rule was compactly and conveniently implemented in
a function ``solver`` in the section :ref:`softeng1:basic:math`.
In more complicated problems it might
be beneficial to use classes and introduce a class ``Problem`` to
hold the definition of the physical problem, and a class ``Solver``
to hold the data and methods needed to numerically solve the problem.
This idea will now be illustrated, resulting in code that represents
an alternative to the ``solver`` and ``experiment_*`` functions found
in the ``decay`` module.

Explaining the details of class programming in Python is considered
beyond the scope of this text.  Readers who are unfamiliar with Python
class programming should first consult one of the many electronic
Python tutorials or textbooks to come up to speed with concepts and
syntax of Python classes before reading on. The author has a gentle
introduction to class programming for scientific applications
in [Ref1]_, see Chapter 7 and 9 and Appendix E.
Other useful resources are

 * The Python Tutorial: `<http://docs.python.org/2/tutorial/classes.html>`_

 * Wiki book on Python Programming: `<http://en.wikibooks.org/wiki/Python_Programming/Classes>`_

 * tutorialspoint.com: `<http://www.tutorialspoint.com/python/python_classes_objects.htm>`_

The problem class  (1)
----------------------

.. index:: problem class

The purpose of the problem class is to store all information about
the mathematical model. This usually means the physical parameters
and formulas
in the problem. Looking at our model problem
:ref:`(2.1) <Eq:softeng1:ode>`-:ref:`(2.2) <Eq:softeng1:u0>`, the physical data cover
:math:`I`, :math:`a`, and :math:`T`. Since we have an analytical solution of
the ODE problem, we may add this solution in terms of a Python
function (or method) to the problem class as well.
A possible problem class is therefore

.. code-block:: python

        from numpy import exp
        
        class Problem:
            def __init__(self, I=1, a=1, T=10):
                self.T, self.I, self.a = I, float(a), T
        
            def u_exact(self, t):
                I, a = self.I, self.a
                return I*exp(-a*t)

We could in the ``u_exact`` method have written
``self.I*exp(-self.a*t)``, but using local variables ``I`` and ``a`` allows
the formula ``I*exp(-a*t)`` which looks closer to the mathematical
expression :math:`Ie^{-at}`.  This is not an important issue with the
current compact formula, but is beneficial in more complicated
problems with longer formulas to obtain the closest possible
relationship between code and mathematics. My coding style is to strip
off the ``self`` prefix when the code expresses mathematical formulas.

The class data can be set either as arguments in the constructor or
at any time later, e.g.,

.. code-block:: python

        problem = Problem(T=5)
        problem.T = 8
        problem.dt = 1.5

(Some programmers prefer ``set`` and ``get`` functions for setting and getting
data in classes, often implemented via *properties* in Python, but
I consider that overkill when we just have a few data items in a class.)

It would be convenient if class ``Problem`` could also initialize
the data from the command line. To this end, we add a method for
defining a set of command-line options and a method that sets the
local attributes equal to what was found on the command line.
The default values associated with the command-line options are taken
as the values provided to the constructor. Class ``Problem`` now becomes

.. code-block:: python

        class Problem:
            def __init__(self, I=1, a=1, T=10):
                self.T, self.I, self.a = I, float(a), T
        
            def define_command_line_options(self, parser=None):
                """Return updated (parser) or new ArgumentParser object."""
                if parser is None:
                    import argparse
                    parser = argparse.ArgumentParser()
        
                parser.add_argument(
                    '--I', '--initial_condition', type=float,
                    default=1.0, help='initial condition, u(0)',
                    metavar='I')
                parser.add_argument(
                    '--a', type=float, default=1.0,
                    help='coefficient in ODE', metavar='a')
                parser.add_argument(
                    '--T', '--stop_time', type=float,
                    default=1.0, help='end time of simulation',
                    metavar='T')
                return parser
        
            def init_from_command_line(self, args):
                """Load attributes from ArgumentParser into instance."""
                self.I, self.a, self.T = args.I, args.a, args.T
        
            def u_exact(self, t):
                """Return the exact solution u(t)=I*exp(-a*t)."""
                I, a = self.I, self.a
                return I*exp(-a*t)

Observe that if the user already has an ``ArgumentParser`` object it can be
supplied, but if she does not have any, class ``Problem`` makes one.
Python's ``None`` object is used to indicate that a variable is not
initialized with a proper value.

The solver class  (1)
---------------------

.. index:: solver class

.. index:: wrapper (code)

The solver class stores data related to the numerical solution method
and provides a function ``solve`` for solving the problem.
A problem object must be given to the constructor so that the solver
can easily look up physical data. In the present example, the
data related to the numerical solution method consists of :math:`\Delta t`
and :math:`\theta`. We add, as in the problem class, functionality for
reading :math:`\Delta t` and :math:`\theta` from the command line:

.. code-block:: python

        class Solver:
            def __init__(self, problem, dt=0.1, theta=0.5):
                self.problem = problem
                self.dt, self.theta = float(dt), theta
        
            def define_command_line_options(self, parser):
                """Return updated (parser) or new ArgumentParser object."""
                parser.add_argument(
                    '--scheme', type=str, default='CN',
                    help='FE, BE, or CN')
                parser.add_argument(
                    '--dt', '--time_step_values', type=float,
                    default=[1.0], help='time step values',
                    metavar='dt', nargs='+', dest='dt_values')
                return parser
        
            def init_from_command_line(self, args):
                """Load attributes from ArgumentParser into instance."""
                self.dt, self.theta = args.dt, args.theta
        
            def solve(self):
                self.u, self.t = solver(
                    self.problem.I, self.problem.a, self.problem.T,
                    self.dt, self.theta)
        
            def error(self):
                """Return norm of error at the mesh points."""
                u_e = self.problem.u_exact(self.t)
                e = u_e - self.u
                E = sqrt(self.dt*sum(e**2))
                return E

Note that the ``solve`` method is just a *wrapper*
of the previously developed stand-alone ``solver`` function.

Combining the objects
~~~~~~~~~~~~~~~~~~~~~

Eventually we need to show how the classes ``Problem`` and ``Solver``
play together:

.. code-block:: python

        def experiment_classes():
            problem = Problem()
            solver = Solver(problem)
        
            # Read input from the command line
            parser = problem.define_command_line_options()
            parser = solver. define_command_line_options(parser)
            args = parser.parse_args()
            problem.init_from_command_line(args)
            solver. init_from_command_line(args)
        
            # Solve and plot
            solver.solve()
            import matplotlib.pyplot as plt
            t_e = np.linspace(0, T, 1001)    # very fine mesh for u_e
            u_e = problem.u_exact(t_e)
        
            plt.plot(t,   u,   'r--o')       # dashed red line with circles
            plt.plot(t_e, u_e, 'b-')         # blue line for u_e
            plt.legend(['numerical, theta=%g' % theta, 'exact'])
            plt.xlabel('t')
            plt.ylabel('u')
            plotfile = 'tmp'
            plt.savefig(plotfile + '.png');  plt.savefig(plotfile + '.pdf')
        
            error = problem.u_exact(t) - u
            E = np.sqrt(dt*np.sum(error**2))
            print 'Error norm:', E
            plt.show()
        
        
        if __name__ == '__main__':
            experiment_compare_dt(True)
            plt.show()

.. _softeng1:prog:se:class2:

Improving the problem and solver classes
----------------------------------------

The previous ``Problem`` and ``Solver`` classes containing parameters
soon get much repetitive code when the number of parameters increases.
Much of this code can be parameterized and be made more compact.
For this purpose, we decide to collect all parameters in a dictionary,
``self.prm``, with two associated dictionaries ``self.type`` and
``self.help`` for holding associated object types and help strings.
For the specific ODE example we deal with, such dictionaries are

.. code-block:: python

        # Problem data
        self.prm  = dict(I=1, a=1, T=10)
        self.type = dict(I=float, a=float, T=float)
        self.help = dict(I='initial condition, u(0)',
                         a='coefficient in ODE',
                         T='end time of simulation')
        # Solver data
        self.prm  = dict(dt=0.5, theta=0.5)
        self.type = dict(dt=float, theta=float)
        self.help = dict(dt='time step value',
                         theta='time discretization parameter')

Provided a problem or solver class defines these three
dictionaries in the constructor, using default or user-supplied values
of the parameters, we can create a super class ``Parameters`` with general code
for defining command-line options and reading them as well as
methods for setting and getting a parameter. A ``Problem`` or ``Solver`` for
a particular mathematical problem can then
inherit most of the needed functionality and code
from the ``Parameters`` class.

A generic class for parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A simplified version of the parameter class looks as follows:

.. code-block:: python

        class Parameters:
            def set(self, **parameters):
                for name in parameters:
                    if name in self.prm:
                        self.prm[name] = parameters[name]
                    else:
                        raise NameError('Illegal parameter name %s' % name)
        
            def get(self, name):
                """Return value of parameter with given name."""
                return self.prm[name]
        
            def define_command_line_options(self, parser=None):
                """Automatic registering of options."""
                if parser is None:
                    import argparse
                    parser = argparse.ArgumentParser()
        
                for name in self.prm:
                    tp = self.type[name] if name in self.type else str
                    help = self.help[name] if name in self.help else None
                    parser.add_argument(
                        '--' + name, default=self.get(name), metavar=name,
                        type=tp, help=help)
        
                return parser
        
            def init_from_command_line(self, args):
                for name in self.prm:
                    self.prm[name] = getattr(args, name)

The file `decay_oo.py <http://tinyurl.com/nm5587k/softeng1/decay_oo.py>`__ contains
a slightly more advanced version of class ``Parameters`` where we
in the ``set`` and ``get`` functions test for valid parameter names and
raise exceptions with informative messages if any name is not registered.

The problem class  (2)
~~~~~~~~~~~~~~~~~~~~~~

.. index:: problem class

A class ``Problem`` for the problem :math:`u'=-au`, :math:`u(0)=I`, :math:`t\in (0,T]`, with
parameters input :math:`a`, :math:`I`, and :math:`T` can now be coded as

.. code-block:: python

        class Problem(Parameters):
            """
            Physical parameters for the problem u'=-a*u, u(0)=I,
            with t in [0,T].
            """
            def __init__(self):
                self.prm  = dict(I=1, a=1, T=10)
                self.type = dict(I=float, a=float, T=float)
                self.help = dict(I='initial condition, u(0)',
                                 a='coefficient in ODE',
                                 T='end time of simulation')
        
            def u_exact(self, t):
                I, a = self.get('I'), self.get('a')
                return I*np.exp(-a*t)

The solver class  (2)
~~~~~~~~~~~~~~~~~~~~~

.. index:: solver class

Also the solver class is derived from class ``Parameters`` and works with
the ``prms``, ``types``, and ``help`` dictionaries in the same way as class
``Problem``. Otherwise, the code is very similar to the previous class ``Solver``:

.. code-block:: python

        class Solver(Parameters):
            def __init__(self, problem):
                self.problem = problem
                self.prm  = dict(dt=0.5, theta=0.5)
                self.type = dict(dt=float, theta=float)
                self.help = dict(dt='time step value',
                                 theta='time discretization parameter')
        
            def solve(self):
                from decay_mod import solver
                self.u, self.t = solver(
                    self.problem.get('I'),
                    self.problem.get('a'),
                    self.problem.get('T'),
                    self.get('dt'),
                    self.get('theta'))
        
            def error(self):
                try:
                    u_e = self.problem.u_exact(self.t)
                    e = u_e - self.u
                    E = np.sqrt(self.get('dt')*np.sum(e**2))
                except AttributeError:
                    E = None
                return E

The advantage with the ``Parameters`` class is that it scales to problems
with a large number of physical and numerical parameters:
as long as the parameters are defined once via a dictionary,
the compact code in class ``Parameters`` can handle any collection of
parameters of any size.

