.. !split

Exercises          (3)
======================

.. --- begin exercise ---

.. _wave:exer:quadratic:2D:

Exercise 15: Check that a solution fulfills the discrete model
--------------------------------------------------------------

Carry out all mathematical details to show that
:ref:`(119) <Eq:wave2D3D:impl:verify:quadratic>` is indeed a solution of the
discrete model for a 2D wave equation with :math:`u=0` on the boundary.
One must check the boundary conditions, the initial conditions,
the general discrete equation at a time level and the special
version of this equation for the first time level.
Filename: ``check_quadratic_solution``.

.. --- end exercise ---

.. --- begin exercise ---

.. _wave:exer:mesh3D:calculus:

Project 16: Calculus with 2D mesh functions
-------------------------------------------

The goal of this project is to redo
:ref:`wave:exer:mesh1D:calculus` with 2D
mesh functions (:math:`f_{i,j}`).

**Differentiation.**
The differentiation results in a discrete gradient
function, which in the 2D case can be represented by a three-dimensional
array ``df[d,i,j]`` where ``d`` represents the direction of
the derivative, and ``i,j`` is a mesh point in 2D.
Use centered differences for
the derivative at inner points and one-sided forward or backward
differences at the boundary points. Construct unit tests and
write a corresponding test function.

**Integration.**
The integral of a 2D mesh function :math:`f_{i,j}` is defined as

.. math::
         F_{i,j} = \int_{y_0}^{y_j} \int_{x_0}^{x_i} f(x,y)dxdy,

where :math:`f(x,y)` is a function that takes on the values of the
discrete mesh function :math:`f_{i,j}` at the mesh points, but can also
be evaluated in between the mesh points. The particular variation
between mesh points can be taken as bilinear, but this is not
important as we will use a product Trapezoidal rule to approximate
the integral over a cell in the mesh and then we only need to
evaluate :math:`f(x,y)` at the mesh points.

Suppose :math:`F_{i,j}` is computed. The calculation of :math:`F_{i+1,j}`
is then

.. math::
        
        F_{i+1,j} &= F_{i,j} + \int_{x_i}^{x_{i+1}}\int_{y_0}^{y_j} f(x,y)dydx\\ 
        & \approx \Delta x \frac{1}{2}\left(
        \int_{y_0}^{y_j} f(x_{i},y)dy
        + \int_{y_0}^{y_j} f(x_{i+1},y)dy\right)
        

The integrals in the :math:`y` direction can be approximated by a Trapezoidal
rule. A similar idea can be used to compute :math:`F_{i,j+1}`. Thereafter,
:math:`F_{i+1,j+1}` can be computed by adding the integral over the final
corner cell to :math:`F_{i+1,j} + F_{i,j+1} - F_{i,j}`. Carry out the
details of these computations and implement a function that can
return :math:`F_{i,j}` for all mesh indices :math:`i` and :math:`j`. Use the
fact that the Trapezoidal rule is exact for linear functions and
write a test function.
Filename: ``mesh_calculus_2D``.

.. --- end exercise ---

.. --- begin exercise ---

.. _wave:app:exer:wave2D:Neumann:

Exercise 17: Implement Neumann conditions in 2D
-----------------------------------------------

Modify the `wave2D_u0.py <http://tinyurl.com/nm5587k/wave/wave2D_u0/wave2D_u0.py>`__
program, which solves the 2D wave equation :math:`u_{tt}=c^2(u_{xx}+u_{yy})`
with constant wave velocity :math:`c` and :math:`u=0` on the boundary, to have
Neumann boundary conditions: :math:`\partial u/\partial n=0`.
Include both scalar code (for debugging and reference) and
vectorized code (for speed).

To test the code, use :math:`u=1.2` as solution (:math:`I(x,y)=1.2`, :math:`V=f=0`, and
:math:`c` arbitrary), which should be exactly reproduced with any mesh
as long as the stability criterion is satisfied.
Another test is to use the plug-shaped pulse
in the ``pulse`` function from the section :ref:`wave:pde2:software`
and the `wave1D_dn_vc.py <http://tinyurl.com/nm5587k/wave/wave1D/wave1D_dn_vc.py>`__
program. This pulse
is exactly propagated in 1D if :math:`c\Delta t/\Delta x=1`. Check
that also the 2D program can propagate this pulse exactly
in :math:`x` direction (:math:`c\Delta t/\Delta x=1`, :math:`\Delta y` arbitrary)
and :math:`y` direction (:math:`c\Delta t/\Delta y=1`, :math:`\Delta x` arbitrary).
Filename: ``wave2D_dn``.

.. --- end exercise ---

.. --- begin exercise ---

.. _wave:exer:3D:f77:cy:efficiency:

Exercise 18: Test the efficiency of compiled loops in 3D
--------------------------------------------------------

Extend the ``wave2D_u0.py`` code and the Cython, Fortran, and C versions to 3D.
Set up an efficiency experiment to determine the relative efficiency of
pure scalar Python code, vectorized code, Cython-compiled loops,
Fortran-compiled loops, and C-compiled loops.
Normalize the CPU time for each mesh by the fastest version.
Filename: ``wave3D_u0``.

.. --- end exercise ---

